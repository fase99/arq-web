---
import type { Feature } from '@data/features';
import Button from '@components/ui/Button.astro';
import Eyebrow from '@components/ui/Eyebrow.astro';
import { Image } from 'astro:assets';
import { getPaddingClass, getBackgroundColor, getTextColor } from '@utils/styleUtils';
import type { PaddingSize, ThemeColor } from '@utils/styleUtils';

export interface Props {
    content: {
        eyebrow?: string;
        title?: string;
        description?: string;
        button?: {
            text: string;
            link: string;
            variant?: 'primary' | 'secondary' | 'ghostLight' | 'ghostDark';
        };
        features: Feature[];
    };
    background?: ThemeColor;
    padding?: PaddingSize;
    paddingTop?: PaddingSize;
    paddingBottom?: PaddingSize;
    displayType?: 'grid' | 'carousel';
}

const {
    content: {
        eyebrow,
        title,
        description,
        button,
        features
    },
    background = 'base',
    displayType = 'grid'
} = Astro.props;

const bgColor = getBackgroundColor(background);
const textColor = getTextColor(background);
const paddingClass = getPaddingClass({ 
    padding: Astro.props.padding,
    paddingTop: Astro.props.paddingTop,
    paddingBottom: Astro.props.paddingBottom 
});
---

<section class:list={["relative", bgColor, paddingClass]}>
    <div class="site-container px-4">
        {(title || description) && (
            <div class="text-center mb-16 max-w-3xl mx-auto">
                {eyebrow && (
                    <Eyebrow 
                        text={eyebrow} 
                        background={background} 
                    />
                )}
                {title && (
                    <h2 class:list={[textColor]} data-aos="fade-up">
                        {title}
                    </h2>
                )}
                {description && (
                    <p class:list={["mt-4", textColor, "opacity-90"]} data-aos="fade-up" data-aos-delay="100">
                        {description}
                    </p>
                )}
                {button && (
                    <div class="mt-8" data-aos="fade-up" data-aos-delay="200">
                        <Button
                            href={button.link}
                            variant={button.variant || 'primary'}
                        >
                            {button.text}
                        </Button>
                    </div>
                )}
            </div>
        )}

        {displayType === 'carousel' ? (
            <!-- Carousel Layout -->
            <div class="features-carousel-simple">
                <div class="overflow-hidden">
                    <div class="features-carousel-track flex transition-transform duration-500 ease-in-out" id="featuresTrack">
                        {features.map((feature, index) => (
                            <div class="carousel-item flex-shrink-0 w-full md:w-1/2 lg:w-1/3 px-4">
                                <div 
                                    class:list={[
                                        "h-full p-6 rounded-lg border border-gray-200 shadow-md",
                                        background === 'dark' ? 'bg-white/95' : 'bg-white',
                                        "flex flex-col text-center items-center",
                                        "transition-all duration-300 hover:shadow-lg hover:scale-105"
                                    ]}
                                    data-aos="fade-up"
                                    data-aos-delay={index * 100}
                                >
                                    <div class:list={[
                                        "w-14 h-14 flex items-center justify-center rounded-full mb-4",
                                        "bg-primary"
                                    ]}>
                                        <feature.icon
                                            size={28}
                                            class="text-white"
                                        />
                                    </div>
                                    <h3 class:list={["text-h4 mb-3", "text-gray-900"]}>
                                        {feature.title}
                                    </h3>
                                    <p class:list={["text-base", "text-gray-700", "flex-grow"]}>
                                        {feature.description}
                                    </p>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
                
                <!-- Navigation buttons -->
                <div class="flex justify-center mt-8 gap-4">
                    <button 
                        class="carousel-btn carousel-prev bg-primary text-white p-2 rounded-full hover:bg-primary-dark transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                        id="prevBtn"
                        aria-label="Anterior"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <polyline points="15,18 9,12 15,6"></polyline>
                        </svg>
                    </button>
                    <button 
                        class="carousel-btn carousel-next bg-primary text-white p-2 rounded-full hover:bg-primary-dark transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                        id="nextBtn"
                        aria-label="Siguiente"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <polyline points="9,18 15,12 9,6"></polyline>
                        </svg>
                    </button>
                </div>
                
                <!-- Dots indicator -->
                <div class="flex justify-center mt-4 gap-2" id="dotsContainer">
                    <!-- Dots will be generated by JavaScript -->
                </div>
            </div>
        ) : (
            <!-- Grid Layout -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-auto-fit gap-8 auto-rows-fr">
                {features.map((feature, index) => (
                    <div 
                        class:list={[
                            "p-6 rounded-lg border border-gray-200 shadow-md",
                            background === 'dark' ? 'bg-white/95' : 'bg-white',
                            "flex flex-col"
                        ]}
                        data-aos="fade-up"
                        data-aos-delay={index * 100}
                    >
                        <div class:list={[
                            "w-12 h-12 flex items-center justify-center rounded-lg mb-4",
                            "bg-primary"
                        ]}>
                            <feature.icon
                                size={24}
                                class="text-white"
                            />
                        </div>
                        <h3 class:list={["text-h4 mb-2", "text-gray-900"]}>
                            {feature.title}
                        </h3>
                        <p class:list={["text-base", "text-gray-700"]}>
                            {feature.description}
                        </p>
                    </div>
                ))}
            </div>
        )}
    </div>
</section>

<script>
    // Simple carousel functionality for Features component
    document.addEventListener('DOMContentLoaded', () => {
        const track = document.getElementById('featuresTrack') as HTMLElement;
        const prevBtn = document.getElementById('prevBtn') as HTMLButtonElement;
        const nextBtn = document.getElementById('nextBtn') as HTMLButtonElement;
        const dotsContainer = document.getElementById('dotsContainer') as HTMLElement;
        
        if (!track || !prevBtn || !nextBtn || !dotsContainer) return;
        
        const items = track.children;
        const totalItems = items.length;
        let currentIndex = 0;
        let itemsPerView = 1;
        
        // Calculate items per view based on screen size
        function calculateItemsPerView(): void {
            const width = window.innerWidth;
            if (width >= 1024) itemsPerView = 3;
            else if (width >= 768) itemsPerView = 2;
            else itemsPerView = 1;
        }
        
        // Create dots
        function createDots(): void {
            dotsContainer.innerHTML = '';
            const totalDots = Math.ceil(totalItems / itemsPerView);
            for (let i = 0; i < totalDots; i++) {
                const dot = document.createElement('button');
                dot.className = 'w-2 h-2 rounded-full bg-gray-300 hover:bg-primary transition-colors';
                dot.addEventListener('click', () => goToSlide(i));
                dotsContainer.appendChild(dot);
            }
        }
        
        // Update carousel position
        function updateCarousel(): void {
            const translateX = -(currentIndex * (100 / itemsPerView));
            track.style.transform = `translateX(${translateX}%)`;
            
            // Update dots
            const dots = dotsContainer.children;
            for (let i = 0; i < dots.length; i++) {
                const dot = dots[i] as HTMLElement;
                dot.classList.toggle('bg-primary', i === Math.floor(currentIndex / itemsPerView));
                dot.classList.toggle('bg-gray-300', i !== Math.floor(currentIndex / itemsPerView));
            }
            
            // Update button states
            const totalDots = Math.ceil(totalItems / itemsPerView);
            const currentDot = Math.floor(currentIndex / itemsPerView);
            prevBtn.disabled = currentDot === 0;
            nextBtn.disabled = currentDot >= totalDots - 1;
        }
        
        // Go to specific slide
        function goToSlide(slideIndex: number): void {
            currentIndex = slideIndex * itemsPerView;
            if (currentIndex >= totalItems) currentIndex = totalItems - itemsPerView;
            if (currentIndex < 0) currentIndex = 0;
            updateCarousel();
        }
        
        // Previous slide
        function prevSlide(): void {
            if (currentIndex > 0) {
                currentIndex = Math.max(0, currentIndex - itemsPerView);
                updateCarousel();
            }
        }
        
        // Next slide
        function nextSlide(): void {
            const maxIndex = totalItems - itemsPerView;
            if (currentIndex < maxIndex) {
                currentIndex = Math.min(maxIndex, currentIndex + itemsPerView);
                updateCarousel();
            }
        }
        
        // Event listeners
        prevBtn.addEventListener('click', prevSlide);
        nextBtn.addEventListener('click', nextSlide);
        
        // Auto-play
        let autoPlayInterval = setInterval(nextSlide, 5000);
        
        // Pause auto-play on hover
        track.addEventListener('mouseenter', () => clearInterval(autoPlayInterval));
        track.addEventListener('mouseleave', () => {
            autoPlayInterval = setInterval(nextSlide, 5000);
        });
        
        // Handle resize
        window.addEventListener('resize', () => {
            calculateItemsPerView();
            createDots();
            currentIndex = 0;
            updateCarousel();
        });
        
        // Touch/swipe support
        let startX = 0;
        let isDragging = false;
        
        track.addEventListener('touchstart', (e: TouchEvent) => {
            startX = e.touches[0].clientX;
            isDragging = true;
        });
        
        track.addEventListener('touchmove', (e: TouchEvent) => {
            if (!isDragging) return;
            e.preventDefault();
        });
        
        track.addEventListener('touchend', (e: TouchEvent) => {
            if (!isDragging) return;
            isDragging = false;
            
            const endX = e.changedTouches[0].clientX;
            const diff = startX - endX;
            
            if (Math.abs(diff) > 50) {
                if (diff > 0) {
                    nextSlide();
                } else {
                    prevSlide();
                }
            }
        });
        
        // Initialize
        calculateItemsPerView();
        createDots();
        updateCarousel();
    });
</script>

<style>
    .grid-cols-auto-fit {
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    }
    
    .features-carousel-simple {
        position: relative;
        max-width: 100%;
        margin: 0 auto;
    }
    
    .carousel-item {
        min-height: 280px;
    }
    
    .carousel-btn:disabled {
        cursor: not-allowed;
        opacity: 0.5;
    }
    
    .carousel-btn:not(:disabled):hover {
        transform: scale(1.05);
    }
    
    @media (max-width: 768px) {
        .features-carousel-simple .carousel-item {
            min-height: 320px;
        }
    }
</style>
